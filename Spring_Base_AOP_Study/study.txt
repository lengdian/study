--主要学习SpringFrameWork中AOP内容（视频：spring入门篇）

AOP基本概念：
		AOP(Aspect Oriented Programming):面向切面编程,通过预编译方式或者运行期动态代理方式，实现某些程序功能的统一维护的一种技术
		可应用该技术的功能有：日志记录、性能统计、安全控制、事务处理、异常处理等
		注意：基于配置文件的切面配置，只支持bean的单例模式！！！
		
		@切面的理解
		
		AOP实现方式：
				1、预编译
					使用该方式的技术有：AspectJ
				2、运行期动态代理(JDK动态代理、CGLib动态代理)
					使用该方式的技术有：SpringAOP JbossAOP
		
		与AOP相关的一些概念
				切面(Aspect):一个关注点的模块化，这个关注点可能会横切多个对象
				连接点(JoinPoint):程序执行过程中的某个特定的点；
								连接点是个虚的概念，可简单理解为切入点的集合，它只是对应用程序的所有需要进行插入切面的一个统称；
								每个切入点都对应具体的连接点，在运行期spring就是根据这些切入点的定义，将通知或者拦截器插入到具体的连接点上。
				通知(Advice):在切面的某个特定的连接点上执行的动作
						通知的类型有：
								前置通知(Before Advice):在连接点之前执行的通知，但不能阻止连接点本身的执行，除非前置通知抛出异常
								返回后通知(After Returning Advice):在连接点正常执行后执行的通知
								抛出异常后通知(After Throwing Advice):连接点执行时抛出异常，执行的通知
								后通知(Finally Advice):当连接点执行完之后执行的通知，无论该连接点是正常退出还是抛出异常
								环绕通知(Around Advice):包围一个连接点的通知
				切入点(PointCut):匹配连接点的断言,切面配置中通知和一个切人点表达式关联
				引入(Introduction):在不修改类代码的前提下，为该类实现一个接口
				
								
		@spring中AOP用途
		@spring的AOP实现
		@有无接口spring AOP的实现区别
		
未学习内容：spring advisor,代理

AspectJ使用：
		@AspectJ与spring aop使用
		@AspectJ在spring中的配置
		@Aspect注解
		@定义切入点
		@AspectJ Advice扩展

 