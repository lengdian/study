--主要学习SpringFrameWork中IOC内容（视频：spring入门篇）

@框架与类库的区别
@面向接口编程

@什么是IOC（inversion of control）:控制反转
    实现方式：依赖注入（DI：Dependency Injection）
	注入方式：设值注入、构造注入  -->code：demo2

spring配置文件中的bean
		bean的作用域（scope属性）：
				singleton(默认):单例，指一个Bean容器（一般指同一个上下文）中只存在一份
				prototype:每次请求（每次使用）都创建新的实例，destroy方式不生效？？
				request(web应用相关):每次http请求创建一个实例且仅在当前request内有效
				session(web应用相关):同上，每次http请求创建，当前session内有效
				global session(web应用相关):
				
		bean的生命周期
				定义：在spring配置文件中定义
				初始化：启动spring容器，加载配置文件，初始化bean对象
						实现方法：
							1.实现org.springframework.beans.factory.InitializingBean接口，覆盖afterPropertiesSet方法
							2.在配置文件的bean中配置init-method属性
							3.全局默认配置
				使用：获取bean对象并使用其属性或者方法
				销毁：销毁bean对象
						实现方法：
							1.实现org.springframework.beans.factory.DisposableBean接口，覆盖destroy方法
							2.在配置文件的bean中配置destroy-method属性
							3.全局默认配置
				@全局初始化以及销毁	
					
		aware接口
				@当bean实现Spring中以Aware结尾的接口后，可以获取spring容器中的相应资源
				
		bean的自动装配(autowire属性  全局default-autowire属性) -->code:demo3
				no(default):不做任何操作
				byName:根据属性名自动装配。此选项将检查容器并根据名字查找与属性完全一直的bean，并将其与属性自动装配
				byType:如果容器中存在一个与指定属性类型相同的bean，那么将与该属性自动装配；
					         如果存在多个该类型的bean，那么抛出异常，并指出不能使用byType方式进行自动装配；
					         如果没有找到相匹配的bean，则什么事都不发生
				constructor:与byType方式类似，不同之处在与它应用于构造器参数。如果容器中没有找到与构造器参数类型一致的bean，那么抛出异常
				
@resource接口：spring提供的操作资源文件的接口
@resourceLoader

spring IOC的注解实现  -->code:demo4
		spring使用注解可以自动检测类并注册bean到spring容器中，下面的注解是会被检测到的：
				@Component是一个通用注解，可用于任何bean
				(@Repository,@Service,@Controller是更有针对性的注解)
				@Repository：通常用于注解DAO类，即持久层
				@Service：通常用于注解service类，即服务层
				@Controller：通常用于注解controller类，即控制层
				
		@使用注解定义bean(未做笔记)
		@使用注解定义bean的作用域(未做笔记)
		
		@Require注解（了解即可）
		
		AutoWired注解：可用于成员变量，成员方法或者构造方法上。该注解将自动注入对象到成员变量，或者方法的参数上。
				@使用Autowired注解之后在容器中找不到相应的bean抛出异常问题
				@可以使用Autowired注解注解spring中那些众所周知的解析依赖性接口
				@使用Autowired注解装配数组
				
		Qualifier（限定符）注解：当按类型自动装配的时候，可能存在多个bean实例的情况，可以使用Qualifier注解缩小范围（或指定唯一），也可以用于指定单独的构造器参数或方法参数
				@Qualifier注解使用方式
				@优化：使用Resource注解代替Autowired+Qualifier注解，通过名字进行注入
				
		PostConstruct和PreDestroy注解：在自动注入之前以及之后调用的方法上要加的注解
				
在java类中使用注解完成xml配置文件的功能（了解即可）：
		@Configuration注解与Bean注解的配合使用：相当于xml配置文件中的beans和bean标签，其目的是为了将配置bean写在代码中，减少xml文件中的配置		
		@ImportResource注解与Value注解的配合使用：主要用来引入配置文件，并且赋值给相应的属性
		@Bean和Scope注解的配合使用：设置作用域以及代理模式
		@Spring4 基于泛型的自动装配  -->需要在接口中定义泛型

autowired（spring注解）与resources（jdk注解）的区别：
	@Autowired注解是按类型装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它required属性为false。如果我们想使用按名称装配，可以结合@Qualifier注解一起使用。如下： 
	    @Autowired  @Qualifier("personDaoBean") 
	    private PersonDao  personDao; 
	   与Qualifier注解使用可适用于成员变量，构造器，多参数方法。

	@Resource注解和@Autowired一样，也可以标注在字段或属性的setter方法上，但它默认按名称装配。名称可以通过@Resource的name属性指定，如果没有指定name属性，当注解标注在字段上，即默认取字段的名称作为bean名称寻找依赖对象，当注解标注在属性的setter方法上，即默认取属性名作为bean名称寻找依赖对象。 
	    @Resource(name=“personDaoBean”) 
	    private PersonDao  personDao;//用于字段上 
	    单独使用适用于成员变量、只有一个参数的setter方法.
	   
	　@Resource装配顺序
	　　1. 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常
	　　2. 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常
	　　3. 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常
	　　4. 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配； 
	
	
	
	
@AOP基本概念
AOP(Aspect Oraented Programming):面向切面的编程

@切面的理解

@AOP实现方式

@AOP相关概念
  @通知的类型
  
@spring中AOP用途
@spring的AOP实现
@有无接口spring AOP的实现区别



 
 
 
 
 
 